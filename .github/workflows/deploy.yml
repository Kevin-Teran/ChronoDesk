name: Deploy Full-Stack ChronoDesk

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'
  FRONTEND_DIR: './frontend'
  BACKEND_DIR: './backend'

jobs:
  # ===================================================
  # üîç AN√ÅLISIS Y VALIDACI√ìN DE C√ìDIGO
  # ===================================================
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Linting
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd ${{ env.FRONTEND_DIR }}
          npm ci
          cd ../${{ env.BACKEND_DIR }}
          npm ci

      - name: Run ESLint (Frontend)
        run: |
          cd ${{ env.FRONTEND_DIR }}
          npm run lint || true

      - name: Run ESLint (Backend)
        run: |
          cd ${{ env.BACKEND_DIR }}
          npm run lint || true

  # ===================================================
  # üß™ TESTING COMPLETO
  # ===================================================
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    needs: code-quality

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: chrono_desk_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd ${{ env.FRONTEND_DIR }}
          npm ci
          cd ../${{ env.BACKEND_DIR }}
          npm ci

      - name: Wait for MySQL
        run: |
          for i in {30..0}; do
            if mysqladmin ping -h 127.0.0.1 -u root -ptest_password; then
              break
            fi
            echo 'Waiting for MySQL...'
            sleep 1
          done

      - name: Setup test database
        run: |
          cd ${{ env.BACKEND_DIR }}
          npm run db:migrate || echo "Migration failed, continuing..."
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: chrono_desk_test
          DB_USERNAME: root
          DB_PASSWORD: test_password

      - name: Run backend tests
        run: |
          cd ${{ env.BACKEND_DIR }}
          npm test
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: chrono_desk_test
          DB_USERNAME: root
          DB_PASSWORD: test_password
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

      - name: Run frontend tests
        run: |
          cd ${{ env.FRONTEND_DIR }}
          npm test -- --run

  # ===================================================
  # üèóÔ∏è BUILD DEL FRONTEND
  # ===================================================
  build-frontend:
    runs-on: ubuntu-latest
    name: Build Frontend
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install frontend dependencies
        run: |
          cd ${{ env.FRONTEND_DIR }}
          npm ci

      - name: Build frontend
        run: |
          cd ${{ env.FRONTEND_DIR }}
          npm run build
        env:
          VITE_API_URL: ${{ secrets.BACKEND_URL }}
          VITE_STRIPE_PUBLIC_KEY: ${{ secrets.VITE_STRIPE_PUBLIC_KEY }}
          VITE_APP_NAME: ChronoDesk

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.FRONTEND_DIR }}/dist/
          retention-days: 1

  # ===================================================
  # üöÄ DESPLIEGUE DEL FRONTEND (GitHub Pages)
  # ===================================================
  deploy-frontend:
    runs-on: ubuntu-latest
    name: Deploy Frontend to GitHub Pages
    needs: build-frontend
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./dist

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # ===================================================
  # üöÄ DESPLIEGUE DEL BACKEND (Railway/Render)
  # ===================================================
  deploy-backend:
    runs-on: ubuntu-latest
    name: Deploy Backend to Railway
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Railway
        uses: railwayapp/railway-deploy@v3
        with:
          api_key: ${{ secrets.RAILWAY_API_KEY }}
          project_id: ${{ secrets.RAILWAY_PROJECT_ID }}
          environment: production
          service: backend

  # ===================================================
  # üìä NOTIFICACI√ìN Y MONITOREO
  # ===================================================
  notify:
    runs-on: ubuntu-latest
    name: Deployment Notification
    needs: [deploy-frontend, deploy-backend]
    if: always()

    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}